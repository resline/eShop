@using eShop.WebApp.Services
@inject ICryptoValidationService ValidationService

<div class="crypto-validation-component">
    @if (ShowValidation && ValidationErrors.Any())
    {
        <div class="validation-errors @GetValidationClass()">
            <div class="validation-header">
                <svg class="validation-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
                    <line x1="15" y1="9" x2="9" y2="15" stroke="currentColor" stroke-width="2"/>
                    <line x1="9" y1="9" x2="15" y2="15" stroke="currentColor" stroke-width="2"/>
                </svg>
                <span class="validation-title">@GetValidationTitle()</span>
            </div>
            
            <ul class="validation-list">
                @foreach (var error in ValidationErrors)
                {
                    <li class="validation-item">@error</li>
                }
            </ul>
            
            @if (ShowDismiss)
            {
                <button type="button" class="dismiss-button" @onclick="DismissValidation">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" stroke-width="2"/>
                        <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </button>
            }
        </div>
    }
    
    @if (ShowValidation && !ValidationErrors.Any() && ShowSuccessMessage)
    {
        <div class="validation-success">
            <svg class="validation-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
                <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>@SuccessMessage</span>
        </div>
    }
</div>

@code {
    [Parameter] public List<string> ValidationErrors { get; set; } = new();
    [Parameter] public bool ShowValidation { get; set; } = true;
    [Parameter] public bool ShowDismiss { get; set; } = false;
    [Parameter] public bool ShowSuccessMessage { get; set; } = false;
    [Parameter] public string SuccessMessage { get; set; } = "Validation passed";
    [Parameter] public string ValidationLevel { get; set; } = "error"; // error, warning, info
    [Parameter] public EventCallback OnDismiss { get; set; }

    private string GetValidationClass()
    {
        return ValidationLevel switch
        {
            "warning" => "validation-warning",
            "info" => "validation-info",
            _ => "validation-error"
        };
    }

    private string GetValidationTitle()
    {
        return ValidationLevel switch
        {
            "warning" => "Warning",
            "info" => "Information",
            _ => "Validation Error"
        };
    }

    private async Task DismissValidation()
    {
        ValidationErrors.Clear();
        if (OnDismiss.HasDelegate)
        {
            await OnDismiss.InvokeAsync();
        }
        StateHasChanged();
    }

    // Helper methods for common validations
    public async Task ValidateAmountAsync(decimal amount, CryptoCurrency currency)
    {
        ValidationErrors.Clear();
        var result = ValidationService.ValidatePaymentAmount(amount, currency);
        if (!result.IsValid)
        {
            ValidationErrors.AddRange(result.Errors);
        }
        StateHasChanged();
    }

    public async Task ValidateAddressAsync(string address, CryptoCurrency currency)
    {
        ValidationErrors.Clear();
        var result = ValidationService.ValidateCryptoAddress(address, currency);
        if (!result.IsValid)
        {
            ValidationErrors.AddRange(result.Errors);
        }
        StateHasChanged();
    }

    public async Task ValidatePaymentIdAsync(string paymentId)
    {
        ValidationErrors.Clear();
        var result = ValidationService.ValidatePaymentId(paymentId);
        if (!result.IsValid)
        {
            ValidationErrors.AddRange(result.Errors);
        }
        StateHasChanged();
    }

    public void AddValidationError(string error)
    {
        if (!ValidationErrors.Contains(error))
        {
            ValidationErrors.Add(error);
            StateHasChanged();
        }
    }

    public void ClearValidationErrors()
    {
        ValidationErrors.Clear();
        StateHasChanged();
    }
}