@using eShop.WebApp.Services
@using eShop.WebApp.Components.Shared
@inject ICryptoPaymentService CryptoService
@inject ILogger<TransactionStatus> Logger

<ErrorBoundary @ref="errorBoundary" OnRetry="@RetryStatusCheck" OnError="@HandleError" ShowDetails="false">
    <div class="transaction-status">
        <div class="status-header">
            <div class="status-icon @GetStatusClass()">
                @GetStatusIcon()
            </div>
            <div class="status-info">
                <h3>@GetStatusTitle()</h3>
                <p>@GetStatusDescription()</p>
            </div>
        </div>

        @if (TransactionId != null && !hasError)
        {
            <div class="transaction-details">
                <div class="detail-row">
                    <span class="detail-label">Transaction ID:</span>
                    <span class="detail-value transaction-id" @onclick="CopyTransactionId" title="Click to copy">
                        @(TransactionId.Length > 20 ? $"{TransactionId[..10]}...{TransactionId[^10..]}" : TransactionId)
                        @if (transactionIdCopied)
                        {
                            <span class="copied-indicator">âœ“</span>
                        }
                    </span>
                </div>
                @if (CryptoCurrency.HasValue)
                {
                    <div class="detail-row">
                        <span class="detail-label">Currency:</span>
                        <span class="detail-value">@CryptoService.GetCurrencyName(CryptoCurrency.Value) (@CryptoService.GetCurrencySymbol(CryptoCurrency.Value))</span>
                    </div>
                }
                @if (Amount.HasValue)
                {
                    <div class="detail-row">
                        <span class="detail-label">Amount:</span>
                        <span class="detail-value">@Amount.Value.ToString("F8") @(CryptoCurrency.HasValue ? CryptoService.GetCurrencySymbol(CryptoCurrency.Value) : "")</span>
                    </div>
                }
                @if (Timestamp.HasValue)
                {
                    <div class="detail-row">
                        <span class="detail-label">Time:</span>
                        <span class="detail-value">@Timestamp.Value.ToString("yyyy-MM-dd HH:mm:ss") UTC</span>
                    </div>
                }
                @if (ConfirmationCount.HasValue && RequiredConfirmations.HasValue)
                {
                    <div class="detail-row">
                        <span class="detail-label">Confirmations:</span>
                        <span class="detail-value confirmation-progress">
                            @ConfirmationCount/@RequiredConfirmations
                            <div class="confirmation-bar">
                                <div class="confirmation-fill" style="width: @(Math.Min(100, (double)ConfirmationCount.Value / RequiredConfirmations.Value * 100))%"></div>
                            </div>
                        </span>
                    </div>
                }
            </div>
        }

        @if (Status == CryptoTransactionStatus.Pending && !hasError)
        {
            <div class="status-progress">
                <div class="progress-bar">
                    <div class="progress-fill"></div>
                </div>
                <div class="progress-text">
                    <span>Waiting for network confirmations...</span>
                    @if (showAutoRefresh)
                    {
                        <span class="auto-refresh">Auto-refreshing every @autoRefreshSeconds seconds</span>
                    }
                </div>
                @if (estimatedTimeRemaining.HasValue)
                {
                    <div class="estimated-time">
                        <small>Estimated completion: @estimatedTimeRemaining.Value.ToString("h\\:mm") remaining</small>
                    </div>
                }
            </div>

            <div class="pending-actions">
                <button type="button" class="refresh-button" @onclick="ManualStatusCheck" disabled="@isChecking">
                    @if (isChecking)
                    {
                        <div class="spinner-small"></div>
                        <span>Checking...</span>
                    }
                    else
                    {
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M23 4v6h-6M1 20v-6h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <span>Check Status</span>
                    }
                </button>
                <button type="button" class="explore-button" @onclick="ViewOnExplorer" disabled="@(string.IsNullOrEmpty(TransactionId))">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M15 3h6v6M10 14L21 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <span>View on Explorer</span>
                </button>
            </div>
        }

        @if (Status == CryptoTransactionStatus.Confirmed && !hasError)
        {
            <div class="success-actions">
                <button type="button" class="continue-button" @onclick="OnTransactionConfirmed">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <span>Continue to Order</span>
                </button>
                <button type="button" class="explore-button" @onclick="ViewOnExplorer" disabled="@(string.IsNullOrEmpty(TransactionId))">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M15 3h6v6M10 14L21 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <span>View Receipt</span>
                </button>
            </div>
        }

        @if ((Status == CryptoTransactionStatus.Failed || Status == CryptoTransactionStatus.Expired) && !hasError)
        {
            <div class="error-actions">
                <button type="button" class="retry-button" @onclick="OnRetryPayment">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M23 4v6h-6M1 20v-6h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <span>Try Again</span>
                </button>
                @if (!string.IsNullOrEmpty(TransactionId))
                {
                    <button type="button" class="explore-button" @onclick="ViewOnExplorer">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M15 3h6v6M10 14L21 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <span>View Details</span>
                    </button>
                }
            </div>
        }

        @if (hasError)
        {
            <div class="status-error">
                <p>Unable to check transaction status. @GetErrorMessage()</p>
                <div class="error-actions">
                    <button type="button" class="retry-button" @onclick="RetryStatusCheck">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 4v6h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        Retry Check
                    </button>
                </div>
            </div>
        }
    </div>
</ErrorBoundary>

@code {
    [Parameter] public CryptoTransactionStatus Status { get; set; }
    [Parameter] public string? TransactionId { get; set; }
    [Parameter] public CryptoCurrency? CryptoCurrency { get; set; }
    [Parameter] public decimal? Amount { get; set; }
    [Parameter] public DateTime? Timestamp { get; set; }
    [Parameter] public int? ConfirmationCount { get; set; }
    [Parameter] public int? RequiredConfirmations { get; set; }
    [Parameter] public EventCallback OnTransactionConfirmed { get; set; }
    [Parameter] public EventCallback OnRetryPayment { get; set; }

    private ErrorBoundary? errorBoundary;
    private bool isChecking = false;
    private bool showAutoRefresh = false;
    private bool hasError = false;
    private bool transactionIdCopied = false;
    private Exception? lastException;
    private Timer? statusTimer;
    private Timer? copyTimer;
    private TimeSpan? estimatedTimeRemaining;
    private int autoRefreshSeconds = 10;
    private int failedAttempts = 0;
    private const int MaxFailedAttempts = 3;

    protected override void OnInitialized()
    {
        if (Status == CryptoTransactionStatus.Pending)
        {
            StartAutoRefresh();
            CalculateEstimatedTime();
        }
    }

    protected override void OnParametersSet()
    {
        if (Status == CryptoTransactionStatus.Pending)
        {
            StartAutoRefresh();
            CalculateEstimatedTime();
        }
        else
        {
            StopAutoRefresh();
        }
    }

    private void StartAutoRefresh()
    {
        showAutoRefresh = true;
        statusTimer?.Dispose();
        
        // Increase delay after failed attempts to avoid overwhelming the service
        var delay = TimeSpan.FromSeconds(autoRefreshSeconds * Math.Pow(1.5, failedAttempts));
        statusTimer = new Timer(async _ => await InvokeAsync(AutoStatusCheck), null, delay, delay);
    }

    private void StopAutoRefresh()
    {
        showAutoRefresh = false;
        statusTimer?.Dispose();
    }

    private void CalculateEstimatedTime()
    {
        if (CryptoCurrency.HasValue && ConfirmationCount.HasValue && RequiredConfirmations.HasValue)
        {
            var remainingConfirmations = RequiredConfirmations.Value - ConfirmationCount.Value;
            if (remainingConfirmations > 0)
            {
                // Estimate based on average block time
                var minutesPerConfirmation = CryptoCurrency.Value == CryptoCurrency.Bitcoin ? 10 : 2;
                estimatedTimeRemaining = TimeSpan.FromMinutes(remainingConfirmations * minutesPerConfirmation);
            }
        }
    }

    private async Task AutoStatusCheck()
    {
        if (isChecking || TransactionId == null || hasError) return;

        try
        {
            await CheckStatusInternal();
            failedAttempts = 0; // Reset on success
        }
        catch (Exception ex)
        {
            failedAttempts++;
            Logger.LogWarning(ex, "Auto status check failed (attempt {FailedAttempts}/{MaxAttempts})", failedAttempts, MaxFailedAttempts);
            
            if (failedAttempts >= MaxFailedAttempts)
            {
                hasError = true;
                lastException = ex;
                StopAutoRefresh();
                StateHasChanged();
            }
            else
            {
                // Adjust refresh rate after failures
                autoRefreshSeconds = Math.Min(60, autoRefreshSeconds * 2);
                StartAutoRefresh();
            }
        }
    }

    private async Task ManualStatusCheck()
    {
        try
        {
            await CheckStatusInternal();
            hasError = false;
            failedAttempts = 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Manual status check failed for transaction {TransactionId}", TransactionId);
            errorBoundary?.ProcessError(ex);
        }
    }

    private async Task CheckStatusInternal()
    {
        if (isChecking || TransactionId == null) return;

        isChecking = true;
        StateHasChanged();

        var newStatus = await CryptoService.CheckTransactionStatusAsync(TransactionId);
        
        if (newStatus != Status)
        {
            Status = newStatus;
            if (Status != CryptoTransactionStatus.Pending)
            {
                StopAutoRefresh();
            }
            Logger.LogInformation("Transaction status updated to {Status} for {TransactionId}", Status, TransactionId);
            StateHasChanged();
        }

        isChecking = false;
        StateHasChanged();
    }

    private async Task RetryStatusCheck()
    {
        hasError = false;
        lastException = null;
        failedAttempts = 0;
        autoRefreshSeconds = 10;
        
        if (Status == CryptoTransactionStatus.Pending)
        {
            StartAutoRefresh();
        }
        
        await ManualStatusCheck();
    }

    private Task HandleError(Exception ex)
    {
        hasError = true;
        lastException = ex;
        StopAutoRefresh();
        return Task.CompletedTask;
    }

    private async Task CopyTransactionId()
    {
        if (TransactionId != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", TransactionId);
                transactionIdCopied = true;
                StateHasChanged();

                copyTimer?.Dispose();
                copyTimer = new Timer(_ => InvokeAsync(() =>
                {
                    transactionIdCopied = false;
                    StateHasChanged();
                }), null, TimeSpan.FromSeconds(2), Timeout.InfiniteTimeSpan);
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to copy transaction ID to clipboard");
            }
        }
    }

    private async Task ViewOnExplorer()
    {
        if (TransactionId != null && CryptoCurrency.HasValue)
        {
            try
            {
                var explorerUrl = CryptoService.GetExplorerUrl(CryptoCurrency.Value, TransactionId);
                await JSRuntime.InvokeVoidAsync("open", explorerUrl, "_blank");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to open blockchain explorer for transaction {TransactionId}", TransactionId);
            }
        }
    }

    private string GetStatusClass() => Status switch
    {
        CryptoTransactionStatus.Pending => "status-pending",
        CryptoTransactionStatus.Confirmed => "status-confirmed",
        CryptoTransactionStatus.Failed => "status-failed",
        CryptoTransactionStatus.Expired => "status-expired",
        _ => "status-pending"
    };

    private string GetStatusTitle() => Status switch
    {
        CryptoTransactionStatus.Pending => "Transaction Pending",
        CryptoTransactionStatus.Confirmed => "Payment Confirmed",
        CryptoTransactionStatus.Failed => "Transaction Failed",
        CryptoTransactionStatus.Expired => "Payment Expired",
        _ => "Checking Status"
    };

    private string GetStatusDescription() => Status switch
    {
        CryptoTransactionStatus.Pending => $"Your transaction is being processed on the blockchain. {(ConfirmationCount.HasValue && RequiredConfirmations.HasValue ? $"Waiting for {RequiredConfirmations - ConfirmationCount} more confirmations." : "This usually takes a few minutes.")}",
        CryptoTransactionStatus.Confirmed => "Your payment has been successfully confirmed! You can now proceed with your order.",
        CryptoTransactionStatus.Failed => "Your transaction failed to process. This could be due to insufficient fees or network issues.",
        CryptoTransactionStatus.Expired => "The payment window has expired. Please initiate a new payment to continue.",
        _ => "Checking transaction status..."
    };

    private string GetErrorMessage()
    {
        if (lastException == null) return "Please try again.";

        return lastException switch
        {
            HttpRequestException => "Network connectivity issue. Please check your connection.",
            TaskCanceledException => "Request timed out. The network may be congested.",
            _ => "An unexpected error occurred. Please try again."
        };
    }

    private RenderFragment GetStatusIcon() => Status switch
    {
        CryptoTransactionStatus.Pending => @<div class="spinner-large"></div>,
        
        CryptoTransactionStatus.Confirmed => @<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>,
        
        CryptoTransactionStatus.Failed => @<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M15 9l-6 6M9 9l6 6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>,
        
        CryptoTransactionStatus.Expired => @<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M12 6v6l4 2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>,
        
        _ => @<div class="spinner-large"></div>
    };

    public void Dispose()
    {
        statusTimer?.Dispose();
        copyTimer?.Dispose();
    }
}