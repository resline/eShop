@using eShop.WebApp.Services
@inject ICryptoPaymentService CryptoService

<div class="transaction-status">
    <div class="status-header">
        <div class="status-icon @GetStatusClass()">
            @GetStatusIcon()
        </div>
        <div class="status-info">
            <h3>@GetStatusTitle()</h3>
            <p>@GetStatusDescription()</p>
        </div>
    </div>

    @if (TransactionId != null)
    {
        <div class="transaction-details">
            <div class="detail-row">
                <span class="detail-label">Transaction ID:</span>
                <span class="detail-value transaction-id">@TransactionId</span>
            </div>
            @if (CryptoCurrency.HasValue)
            {
                <div class="detail-row">
                    <span class="detail-label">Currency:</span>
                    <span class="detail-value">@CryptoService.GetCurrencyName(CryptoCurrency.Value) (@CryptoService.GetCurrencySymbol(CryptoCurrency.Value))</span>
                </div>
            }
            @if (Amount.HasValue)
            {
                <div class="detail-row">
                    <span class="detail-label">Amount:</span>
                    <span class="detail-value">@Amount.Value.ToString("F8") @(CryptoCurrency.HasValue ? CryptoService.GetCurrencySymbol(CryptoCurrency.Value) : "")</span>
                </div>
            }
            @if (Timestamp.HasValue)
            {
                <div class="detail-row">
                    <span class="detail-label">Time:</span>
                    <span class="detail-value">@Timestamp.Value.ToString("yyyy-MM-dd HH:mm:ss") UTC</span>
                </div>
            }
        </div>
    }

    @if (Status == CryptoTransactionStatus.Pending)
    {
        <div class="status-progress">
            <div class="progress-bar">
                <div class="progress-fill"></div>
            </div>
            <div class="progress-text">
                <span>Waiting for network confirmations...</span>
                @if (showAutoRefresh)
                {
                    <span class="auto-refresh">Auto-refreshing every 10 seconds</span>
                }
            </div>
        </div>

        <div class="pending-actions">
            <button type="button" class="refresh-button" @onclick="CheckStatus" disabled="@isChecking">
                @if (isChecking)
                {
                    <div class="spinner-small"></div>
                    <span>Checking...</span>
                }
                else
                {
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M23 4v6h-6M1 20v-6h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <span>Check Status</span>
                }
            </button>
        </div>
    }

    @if (Status == CryptoTransactionStatus.Confirmed)
    {
        <div class="success-actions">
            <button type="button" class="continue-button" @onclick="OnTransactionConfirmed">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Continue to Order</span>
            </button>
        </div>
    }

    @if (Status == CryptoTransactionStatus.Failed || Status == CryptoTransactionStatus.Expired)
    {
        <div class="error-actions">
            <button type="button" class="retry-button" @onclick="OnRetryPayment">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M23 4v6h-6M1 20v-6h6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Try Again</span>
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public CryptoTransactionStatus Status { get; set; }
    [Parameter] public string? TransactionId { get; set; }
    [Parameter] public CryptoCurrency? CryptoCurrency { get; set; }
    [Parameter] public decimal? Amount { get; set; }
    [Parameter] public DateTime? Timestamp { get; set; }
    [Parameter] public EventCallback OnTransactionConfirmed { get; set; }
    [Parameter] public EventCallback OnRetryPayment { get; set; }

    private bool isChecking = false;
    private bool showAutoRefresh = false;
    private Timer? statusTimer;

    protected override void OnInitialized()
    {
        if (Status == CryptoTransactionStatus.Pending)
        {
            StartAutoRefresh();
        }
    }

    protected override void OnParametersSet()
    {
        if (Status == CryptoTransactionStatus.Pending)
        {
            StartAutoRefresh();
        }
        else
        {
            StopAutoRefresh();
        }
    }

    private void StartAutoRefresh()
    {
        showAutoRefresh = true;
        statusTimer?.Dispose();
        statusTimer = new Timer(async _ => await InvokeAsync(CheckStatus), null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private void StopAutoRefresh()
    {
        showAutoRefresh = false;
        statusTimer?.Dispose();
    }

    private async Task CheckStatus()
    {
        if (isChecking || TransactionId == null) return;

        isChecking = true;
        StateHasChanged();

        try
        {
            var newStatus = await CryptoService.CheckTransactionStatusAsync(TransactionId);
            
            if (newStatus != Status)
            {
                Status = newStatus;
                if (Status != CryptoTransactionStatus.Pending)
                {
                    StopAutoRefresh();
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Handle error silently for now
        }
        finally
        {
            isChecking = false;
            StateHasChanged();
        }
    }

    private string GetStatusClass() => Status switch
    {
        CryptoTransactionStatus.Pending => "status-pending",
        CryptoTransactionStatus.Confirmed => "status-confirmed",
        CryptoTransactionStatus.Failed => "status-failed",
        CryptoTransactionStatus.Expired => "status-expired",
        _ => "status-pending"
    };

    private string GetStatusTitle() => Status switch
    {
        CryptoTransactionStatus.Pending => "Transaction Pending",
        CryptoTransactionStatus.Confirmed => "Payment Confirmed",
        CryptoTransactionStatus.Failed => "Transaction Failed",
        CryptoTransactionStatus.Expired => "Payment Expired",
        _ => "Checking Status"
    };

    private string GetStatusDescription() => Status switch
    {
        CryptoTransactionStatus.Pending => "Your transaction is being processed on the blockchain. This usually takes a few minutes.",
        CryptoTransactionStatus.Confirmed => "Your payment has been successfully confirmed! You can now proceed with your order.",
        CryptoTransactionStatus.Failed => "Your transaction failed to process. Please try again or contact support if the issue persists.",
        CryptoTransactionStatus.Expired => "The payment window has expired. Please initiate a new payment to continue.",
        _ => "Checking transaction status..."
    };

    private RenderFragment GetStatusIcon() => Status switch
    {
        CryptoTransactionStatus.Pending => @<div class="spinner-large"></div>,
        
        CryptoTransactionStatus.Confirmed => @<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>,
        
        CryptoTransactionStatus.Failed => @<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M15 9l-6 6M9 9l6 6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>,
        
        CryptoTransactionStatus.Expired => @<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
            <path d="M12 6v6l4 2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>,
        
        _ => @<div class="spinner-large"></div>
    };

    public void Dispose()
    {
        statusTimer?.Dispose();
    }
}