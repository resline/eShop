// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eShop.CryptoPayment.API.Infrastructure;

#nullable disable

namespace eShop.CryptoPayment.API.Infrastructure.Migrations
{
    [DbContext(typeof(CryptoPaymentContext))]
    partial class CryptoPaymentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.CryptoPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlockNumber")
                        .HasColumnType("integer");

                    b.Property<string>("BuyerId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Confirmations")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CryptoCurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("PaymentAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ReceivedAmount")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("RequestedAmount")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("RequiredConfirmations")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CryptoCurrencyId");

                    b.HasIndex("PaymentAddressId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionHash");

                    b.ToTable("CryptoPayments", (string)null);
                });

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.CryptoCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Decimals")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NetworkName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("CryptoCurrencies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Decimals = 8,
                            IsActive = true,
                            Name = "Bitcoin",
                            NetworkName = "Bitcoin",
                            Symbol = "BTC",
                            UpdatedAt = new DateTime(2025, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Decimals = 18,
                            IsActive = true,
                            Name = "Ethereum",
                            NetworkName = "Ethereum",
                            Symbol = "ETH",
                            UpdatedAt = new DateTime(2025, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.PaymentAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CryptoCurrencyId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("PrivateKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CryptoCurrencyId");

                    b.HasIndex("CryptoCurrencyId", "IsUsed");

                    b.ToTable("PaymentAddresses", (string)null);
                });

            modelBuilder.Entity("eShop.IntegrationEventLogEF.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TimesSent")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLogs", (string)null);
                });

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.CryptoPayment", b =>
                {
                    b.HasOne("eShop.CryptoPayment.API.Models.CryptoCurrency", "CryptoCurrency")
                        .WithMany("Payments")
                        .HasForeignKey("CryptoCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.CryptoPayment.API.Models.PaymentAddress", "PaymentAddress")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoCurrency");

                    b.Navigation("PaymentAddress");
                });

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.PaymentAddress", b =>
                {
                    b.HasOne("eShop.CryptoPayment.API.Models.CryptoCurrency", "CryptoCurrency")
                        .WithMany("PaymentAddresses")
                        .HasForeignKey("CryptoCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoCurrency");
                });

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.CryptoCurrency", b =>
                {
                    b.Navigation("PaymentAddresses");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("eShop.CryptoPayment.API.Models.PaymentAddress", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}